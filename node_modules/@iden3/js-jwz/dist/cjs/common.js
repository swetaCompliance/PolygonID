"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.prove = exports.AuthV2Circuit = exports.AuthCircuit = exports.Groth16 = void 0;
const witness_calculator_1 = require("./witness_calculator");
const snarkjs = __importStar(require("snarkjs"));
const js_iden3_core_1 = require("@iden3/js-iden3-core");
exports.Groth16 = 'groth16';
exports.AuthCircuit = 'auth';
exports.AuthV2Circuit = 'authV2';
async function prove(inputs, provingKey, wasm) {
    const witnessCalculator = await (0, witness_calculator_1.witnessBuilder)(wasm);
    const jsonString = new TextDecoder().decode(inputs);
    const parsedData = JSON.parse(jsonString);
    const wtnsBytes = await witnessCalculator.calculateWTNSBin(parsedData, 0);
    const { proof, publicSignals } = await snarkjs.groth16.prove(provingKey, wtnsBytes);
    return {
        proof: proof,
        pub_signals: publicSignals,
    };
}
exports.prove = prove;
async function verify(messageHash, proof, verificationKey, unmarshall) {
    const outputs = unmarshall(proof.pub_signals);
    if (outputs.challenge !== (0, js_iden3_core_1.fromBigEndian)(messageHash)) {
        throw new Error('challenge is not equal to message hash');
    }
    return await snarkjs.groth16.verify(JSON.parse(Buffer.from(verificationKey).toString()), proof.pub_signals, proof.proof);
}
exports.verify = verify;
//# sourceMappingURL=common.js.map