"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.newDataFromBytes = exports.checkEntryInField = exports.elemBytesToBigInts = void 0;
const elemBytes_1 = require("../entry/elemBytes");
const crypto_1 = require("./crypto");
const data_1 = require("../entry/data");
const constants_1 = require("../../constants");
const elemBytesToBigInts = (es) => {
    const bigInts = es.map((e) => {
        return e.bigInt();
    });
    return bigInts;
};
exports.elemBytesToBigInts = elemBytesToBigInts;
const checkEntryInField = (e) => {
    const bigInts = (0, exports.elemBytesToBigInts)(e.data.value);
    let flag = true;
    bigInts.forEach((b) => {
        if (!(0, crypto_1.checkBigIntInField)(b)) {
            flag = false;
        }
    });
    return flag;
};
exports.checkEntryInField = checkEntryInField;
const newDataFromBytes = (bytes) => {
    if (bytes.length !== constants_1.DATA_LEN_BYTES) {
        throw `expected bytes length to be ${constants_1.DATA_LEN_BYTES}, got ${bytes.length}`;
    }
    const d = new data_1.Data();
    const arr = new Array(constants_1.DATA_LEN_BYTES);
    for (let i = 0; i < constants_1.DATA_LEN; i += 1) {
        const tmp = new elemBytes_1.ElemBytes();
        tmp.value = bytes.slice(i * constants_1.ELEM_BYTES_LEN, (i + 1) * constants_1.DATA_LEN_BYTES);
        arr[i] = tmp;
    }
    d.value = arr;
    return d;
};
exports.newDataFromBytes = newDataFromBytes;
//# sourceMappingURL=entry.js.map