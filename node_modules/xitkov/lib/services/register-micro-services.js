"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerMicroServices = void 0;
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const micro_service_1 = require("./micro-service");
async function registerMicroServices() {
    var _a, _b, _c;
    if (((_a = require.main) === null || _a === void 0 ? void 0 : _a.filename) == undefined) {
        throw new Error("Please provide service path");
    }
    const appDir = path_1.default.dirname((_b = require.main) === null || _b === void 0 ? void 0 : _b.filename);
    const serviceDirPath = appDir + '/micro-services';
    const servicesNames = (await fs_1.promises.readdir(serviceDirPath)).filter(file => !/index.|.js.map|.d.ts|types./.test(file));
    const services = {};
    for (const serviceName of servicesNames) {
        const servicePath = `${serviceDirPath}/${serviceName}`;
        try {
            const service = new (require(servicePath).default);
            if (service) {
                const { baseURL, name, services: subServicesNames, config } = service;
                services[name] = (_c = services[name]) !== null && _c !== void 0 ? _c : {};
                subServicesNames === null || subServicesNames === void 0 ? void 0 : subServicesNames.forEach((service) => {
                    services[name][service] = new micro_service_1.MicroService({ axiosConfig: config, name, service, baseURL });
                });
                services[serviceName] = service;
            }
        }
        catch (error) {
            logger_1.Logger.warn("No micro services", {
                error
            });
        }
    }
    return services;
}
exports.registerMicroServices = registerMicroServices;
//# sourceMappingURL=register-micro-services.js.map