import { Request, Response } from "express";
import { Model } from "mongoose";
import type { InternalServiceMethods, Query, User } from "./types";
export interface MongoInternalServiceMethods<T = any> extends InternalServiceMethods<T> {
    model: Model<T>;
}
export interface MongoInternalServiceOptions {
    Model: Model<any>;
}
export declare class MongoDBService<T> implements MongoInternalServiceMethods<T> {
    readonly Model: Model<any>;
    constructor({ Model }: MongoInternalServiceOptions);
    find(query?: Query, user?: User, req?: Request, res?: Response): Promise<T[]>;
    get(id: string | null, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    create(data: Partial<T> | Partial<T>[], query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[]>;
    update(id: string, data: T, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    patch(id: string, data: Partial<T>, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
    remove(id: string, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
    get model(): Model<any, {}, {}, {}>;
    _find(query?: Query): Promise<T[]>;
    _get(id: string | null, query?: Query): Promise<T | null>;
    _create(data: Partial<T> | Partial<T>[]): Promise<T | T[]>;
    _update(id: string, data: T): Promise<T | null>;
    _patch(id: string, data: Partial<T>): Promise<T | T[] | null>;
    _remove(id: string, query?: Query): Promise<T | T[] | null>;
}
