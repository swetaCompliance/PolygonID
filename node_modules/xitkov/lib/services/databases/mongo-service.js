"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongoDBService = void 0;
class MongoDBService {
    constructor({ Model }) {
        this.Model = Model;
    }
    async find(query, user, req, res) {
        return await this.Model.find(query !== null && query !== void 0 ? query : {});
    }
    async get(id, query, user, req, res) {
        return await this.Model.findOne({
            _id: id,
            ...query
        });
    }
    async create(data, query, user, req, res) {
        return (await this.Model.create(data)).toJSON();
    }
    async update(id, data, query, user, req, res) {
        return await this.Model.findOneAndUpdate({ _id: id }, { $set: data }, { new: true });
    }
    async patch(id, data, query, user, req, res) {
        return await this.Model.findOneAndUpdate({ _id: id }, { $set: data }, { new: true });
    }
    async remove(id, query, user, req, res) {
        return await this.Model.findOneAndDelete({ _id: id, ...query });
    }
    get model() {
        return this.Model;
    }
    async _find(query) {
        return await this.Model.find(query !== null && query !== void 0 ? query : {});
    }
    async _get(id, query) {
        return await this.Model.findOne({
            _id: id,
            ...query
        });
    }
    async _create(data) {
        return (await this.Model.create(data)).toJSON();
    }
    async _update(id, data) {
        return await this.Model.findOneAndUpdate({ _id: id }, { $set: data }, { new: true });
    }
    async _patch(id, data) {
        return await this.Model.findOneAndUpdate({ _id: id }, { $set: data }, { new: true });
    }
    async _remove(id, query) {
        return await this.Model.findOneAndDelete({ _id: id, ...query });
    }
}
exports.MongoDBService = MongoDBService;
//# sourceMappingURL=mongo-service.js.map