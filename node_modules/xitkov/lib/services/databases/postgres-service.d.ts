import { Request, Response } from "express";
import { ModelStatic, DestroyOptions } from 'sequelize';
import { FindResponse, InternalServiceMethods, Query, User } from "./types";
export interface PostgresInternalServiceMethods<T = any> extends InternalServiceMethods<any> {
    model: ModelStatic<any>;
}
export interface PostgresInternalServiceOptions<T = any> {
    Model: ModelStatic<any>;
    pagination?: boolean;
}
export declare class PostgreSQLService<T = any> implements PostgresInternalServiceMethods<T> {
    protected readonly Model: ModelStatic<any>;
    pagination?: boolean | undefined;
    constructor({ Model, pagination }: PostgresInternalServiceOptions<T>);
    find(query?: any, user?: User, req?: Request): Promise<FindResponse<T>>;
    get(id: string | null, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    create(data: Partial<T> | Partial<T>[], query?: Query, user?: User, req?: Request, res?: Response): Promise<any>;
    update(id: string, data: any, query?: Query, user?: User, req?: Request, res?: Response): Promise<any>;
    patch(id: string, data: Partial<T>, query?: Query, user?: User, req?: Request, res?: Response): Promise<any>;
    remove(id: string, query?: DestroyOptions, user?: User, req?: Request, res?: Response): Promise<any>;
    get model(): ModelStatic<any>;
    _find(query?: Query, user?: User, req?: Request): Promise<FindResponse<T>>;
    _get(id: string | null, query?: Query): Promise<T | null>;
    _create(data: Partial<T> | Partial<T>[]): Promise<T | T[]>;
    _update(id: string, data: Partial<any>): Promise<any>;
    _patch(id: string, data: Partial<T>): Promise<any>;
    _remove(id: string, query?: Query): Promise<any>;
}
