"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PostgreSQLService = void 0;
class PostgreSQLService {
    constructor({ Model, pagination }) {
        this.Model = Model;
        this.pagination = pagination;
    }
    async find(query, user, req) {
        const { $limit, $offset, ...restQuery } = query !== null && query !== void 0 ? query : {};
        const modelQuery = {
            where: {
                ...(restQuery !== null && restQuery !== void 0 ? restQuery : {})
            },
        };
        if ($limit) {
            modelQuery.limit = $limit;
        }
        if ($offset) {
            modelQuery.offset = $offset;
        }
        if (this.pagination) {
            return await this.Model.findAndCountAll(modelQuery);
        }
        return await this.Model.findAll(modelQuery);
    }
    async get(id, query, user, req, res) {
        if (id) {
            return await this.Model.findByPk(id);
        }
        return await this.Model.findOne({
            where: {
                ...(query !== null && query !== void 0 ? query : {})
            }
        });
    }
    async create(data, query, user, req, res) {
        return await this.Model.create(data);
    }
    async update(id, data, query, user, req, res) {
        return await this.Model.update({ ...data }, {
            where: {
                id,
                ...(query !== null && query !== void 0 ? query : {})
            },
        });
    }
    async patch(id, data, query, user, req, res) {
        return await this.Model.update({ ...data }, {
            where: {
                id,
                ...(query !== null && query !== void 0 ? query : {})
            },
        });
    }
    async remove(id, query, user, req, res) {
        return await this.Model.destroy({
            where: {
                id,
                ...(query !== null && query !== void 0 ? query : {})
            }
        });
    }
    get model() {
        return this.Model;
    }
    async _find(query, user, req) {
        const { $limit, $offset, ...restQuery } = query !== null && query !== void 0 ? query : {};
        const modelQuery = {
            where: {
                ...(restQuery !== null && restQuery !== void 0 ? restQuery : {})
            },
        };
        if ($limit) {
            modelQuery.limit = $limit;
        }
        if ($offset) {
            modelQuery.offset = $offset;
        }
        if (this.pagination) {
            return await this.Model.findAndCountAll(modelQuery);
        }
        return await this.Model.findAll(modelQuery);
    }
    async _get(id, query) {
        if (id) {
            return await this.Model.findByPk(id);
        }
        return await this.Model.findOne({
            where: {
                ...(query !== null && query !== void 0 ? query : {})
            }
        });
    }
    async _create(data) {
        return await this.Model.create(data);
    }
    async _update(id, data) {
        const [, updatedData] = await this.Model.update({ ...data }, {
            where: {
                id
            },
            returning: true
        });
        return updatedData;
    }
    async _patch(id, data) {
        const [, updatedData] = await this.Model.update({ ...data }, {
            where: {
                id
            },
            returning: true,
        });
        return updatedData;
    }
    async _remove(id, query) {
        return await this.Model.destroy({
            where: {
                id,
                ...(query !== null && query !== void 0 ? query : {})
            }
        });
    }
}
exports.PostgreSQLService = PostgreSQLService;
//# sourceMappingURL=postgres-service.js.map