import { AxiosInstance, AxiosRequestConfig } from 'axios';
export declare type MicroServiceQuery = {
    [key: string]: any;
};
export interface InternalMicroServiceMethods {
    find<T = any>(query: MicroServiceQuery, config?: IConfig<T>): Promise<T[]>;
    get<T = any>(id: string | null, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    create<T = any, U = any>(data: Partial<U>, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    update<T = any, U = any>(id: string, data: U, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    patch<T = any, U = any>(id: string, data: Partial<U>, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    remove<T = any>(id: string, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | T[] | null>;
    readonly request: AxiosInstance;
    readonly call: AxiosInstance;
    readonly name: string;
    readonly baseURL: string;
    readonly service: string;
    readonly url: string;
}
export interface InternalMicroServiceOptions {
    axiosConfig?: AxiosRequestConfig;
    name: string;
    baseURL: string;
    service: string;
}
interface IConfig<T = any> {
    axiosConfig?: AxiosRequestConfig;
    execption?: {
        handle?: boolean;
        defaultValue?: Partial<T> | null;
    };
}
export declare class MicroService implements InternalMicroServiceMethods {
    readonly request: AxiosInstance;
    readonly name: string;
    readonly baseURL: string;
    readonly service: string;
    readonly url: string;
    constructor({ axiosConfig, name, service, baseURL }: InternalMicroServiceOptions);
    throwError(err: any): any;
    find<T = any>(query?: MicroServiceQuery, config?: IConfig<T>): Promise<T[]>;
    get<T = any>(id: string | null, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    create<T = any, U = any>(payload: Partial<U>, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T>;
    update<T = any, U = any>(id: string, payload: U, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    patch<T = any, U = any>(id: string, payload: Partial<U>, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | null>;
    remove<T = any>(id: string, query?: MicroServiceQuery, config?: IConfig<T>): Promise<T | T[] | null>;
    get call(): AxiosInstance;
    private getLog;
    private getConfig;
    private handleException;
}
export interface IMicroService {
    name: string;
    baseURL: string;
    config?: AxiosRequestConfig;
    services: string[];
}
export {};
