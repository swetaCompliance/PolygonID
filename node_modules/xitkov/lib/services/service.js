"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XitkovService = void 0;
const databases_1 = require("./databases");
class XitkovService {
    constructor({ Model, dialect, pagination }) {
        this.Model = Model;
        switch (dialect) {
            case 'postgres':
                this.service = new databases_1.PostgreSQLService({ Model, pagination });
                break;
            case 'mongodb':
            default:
                this.service = new databases_1.MongoDBService({ Model });
        }
    }
    async find(query, user, req, res) {
        return await this.service.find(query, user, req, res);
    }
    async get(id, query, user, req, res) {
        return await this.service.get(id, query, user, req, res);
    }
    async create(data, query, user, req, res) {
        return await this.service.create(data, query, user, req, res);
    }
    async update(id, data, query, user, req, res) {
        return await this.service.update(id, data, query, user, req, res);
    }
    async patch(id, data, query, user, req, res) {
        return await this.service.patch(id, data, query, user, req, res);
    }
    async remove(id, query, user, req, res) {
        return await this.service.remove(id, query, user, req, res);
    }
    get model() {
        return this.Model;
    }
    async _find(query, user, req, res) {
        return await this.service.find(query, user, req, res);
    }
    async _get(id, query, user, req, res) {
        return await this.service.get(id, query, user, req, res);
    }
    async _create(data, query, user, req, res) {
        return await this.service.create(data, query, user, req, res);
    }
    async _update(id, data, query, user, req, res) {
        return await this.service.update(id, data, query, user, req, res);
    }
    async _patch(id, data, query, user, req, res) {
        return await this.service.patch(id, data, query, user, req, res);
    }
    async _remove(id, query, user, req, res) {
        return await this.service.remove(id, query, user, req, res);
    }
}
exports.XitkovService = XitkovService;
//# sourceMappingURL=service.js.map