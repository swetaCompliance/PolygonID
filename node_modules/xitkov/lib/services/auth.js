"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthService = void 0;
const axios_1 = __importDefault(require("axios"));
const errors_1 = require("../errors");
class AuthService {
    constructor({ axiosConfig, baseURL }) {
        this.request = axios_1.default.create({ ...(axiosConfig !== null && axiosConfig !== void 0 ? axiosConfig : {}), baseURL, });
        this.baseURL = baseURL;
    }
    throwError(err) {
        var _a, _b, _c, _d;
        const message = (_b = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message;
        const status = (_c = err === null || err === void 0 ? void 0 : err.response) === null || _c === void 0 ? void 0 : _c.status;
        if (message) {
            switch (status) {
                case 401: {
                    return new errors_1.Unauthorized(message);
                }
                case 400: {
                    return new errors_1.BadRequest(message);
                }
                case 500: {
                    return new errors_1.InternalServer(message);
                }
                case 204: {
                    return new errors_1.NoContent(message);
                }
                default: {
                    return new errors_1.InternalServer(message);
                }
            }
        }
        else {
            return new errors_1.InternalServer((_d = err === null || err === void 0 ? void 0 : err.message) !== null && _d !== void 0 ? _d : err);
        }
    }
    async verify(query, config = {}) {
        var _a;
        try {
            const { data } = await this.request.post(`${this.baseURL}/verify`, { ...config, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.throwError(err);
        }
    }
}
exports.AuthService = AuthService;
//# sourceMappingURL=auth.js.map