"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicroService = void 0;
const axios_1 = __importDefault(require("axios"));
const errors_1 = require("../errors");
const logger_1 = require("../logger");
class MicroService {
    constructor({ axiosConfig, name, service, baseURL }) {
        var _a;
        const providedAxiosConfig = (axiosConfig !== null && axiosConfig !== void 0 ? axiosConfig : {});
        this.request = axios_1.default.create({
            baseURL,
            headers: {
                InternalToken: (_a = process.env.INTERNAL_TOKEN) !== null && _a !== void 0 ? _a : 'internal_token',
                ...providedAxiosConfig.headers,
            },
            ...providedAxiosConfig,
        });
        this.name = name;
        this.baseURL = baseURL;
        this.service = service;
        this.url = `/${service}`;
    }
    throwError(err) {
        var _a, _b, _c, _d;
        const message = (_b = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message;
        const status = (_c = err === null || err === void 0 ? void 0 : err.response) === null || _c === void 0 ? void 0 : _c.status;
        if (message) {
            switch (status) {
                case 401: {
                    return new errors_1.Unauthorized(message);
                }
                case 400: {
                    return new errors_1.BadRequest(message);
                }
                case 500: {
                    return new errors_1.InternalServer(message);
                }
                case 204: {
                    return new errors_1.NoContent(message);
                }
                default: {
                    return new errors_1.InternalServer(message);
                }
            }
        }
        else {
            return new errors_1.InternalServer((_d = err === null || err === void 0 ? void 0 : err.message) !== null && _d !== void 0 ? _d : err);
        }
    }
    async find(query, config = {}) {
        var _a;
        const defaultValue = [];
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, defaultValue);
        try {
            const { data } = await this.request.get(`${this.url}`, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    async get(id, query, config = {}) {
        var _a;
        const defaultValue = {};
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, defaultValue);
        try {
            const { data } = await this.request.get(`${this.url}/${id}`, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    async create(payload, query, config = {}) {
        var _a;
        const defaultValue = {};
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, {});
        try {
            const { data } = await this.request.post(`${this.url}`, payload, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    async update(id, payload, query, config = {}) {
        var _a;
        const defaultValue = {};
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, {});
        try {
            const { data } = await this.request.put(`${this.url}/${id}`, payload, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    async patch(id, payload, query, config = {}) {
        var _a;
        const defaultValue = {};
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, {});
        try {
            const { data } = await this.request.patch(`${this.url}/${id}`, payload, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    async remove(id, query, config = {}) {
        var _a;
        const defaultValue = {};
        const { axiosConfig = {}, execption = {} } = this.getConfig(config, {});
        try {
            const { data } = await this.request.delete(`${this.url}/${id}`, { ...axiosConfig, params: query });
            return (_a = data === null || data === void 0 ? void 0 : data.data) !== null && _a !== void 0 ? _a : data;
        }
        catch (err) {
            return this.handleException(execption, defaultValue, err);
        }
    }
    get call() {
        return this.request;
    }
    getLog(err) {
        var _a, _b, _c, _d, _e, _f, _g;
        const message = (_b = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message;
        const status = (_c = err === null || err === void 0 ? void 0 : err.response) === null || _c === void 0 ? void 0 : _c.status;
        logger_1.Logger.error(`Error ${this.name}`, {
            message,
            status,
            url: this.url,
            errorMessage: (_d = message !== null && message !== void 0 ? message : err === null || err === void 0 ? void 0 : err.message) !== null && _d !== void 0 ? _d : err,
            error: (_g = (_f = (_e = err === null || err === void 0 ? void 0 : err.response) === null || _e === void 0 ? void 0 : _e.data) !== null && _f !== void 0 ? _f : err === null || err === void 0 ? void 0 : err.response) !== null && _g !== void 0 ? _g : err,
        });
    }
    getConfig(config, defaultValue) {
        const { axiosConfig = {}, execption = {} } = config !== null && config !== void 0 ? config : {
            axiosConfig: {},
            execption: {
                defaultValue,
                handle: false
            }
        };
        return {
            axiosConfig,
            execption
        };
    }
    handleException(execption, defaultInitialValue, err) {
        const { defaultValue = defaultInitialValue, handle = false } = execption !== null && execption !== void 0 ? execption : {
            defaultValue: defaultInitialValue,
            handle: false
        };
        if (handle) {
            this.getLog(err);
            return defaultValue;
        }
        return this.throwError(err);
    }
}
exports.MicroService = MicroService;
//# sourceMappingURL=micro-service.js.map