import { Request, Response } from "express";
import { Model as MongoModel } from "mongoose";
import { ModelStatic as SequelizeModel } from 'sequelize';
import { Dialect } from "..";
import { FindResponse, InternalServiceMethods, Query, User } from './databases';
declare type ModelType<T, U> = U extends 'postgres' ? SequelizeModel<any> : U extends "mongodb" ? MongoModel<T> : any;
export interface IXitovServiceProps {
    Model: any;
    dialect?: Dialect;
    pagination?: boolean;
}
export declare class XitkovService<T, U = 'postgres'> implements InternalServiceMethods<T> {
    private service;
    private Model;
    pagination?: boolean;
    constructor({ Model, dialect, pagination }: IXitovServiceProps);
    find(query: Query, user?: any, req?: Request, res?: Response): Promise<FindResponse<T>>;
    get(id: string | null, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    create(data: Partial<T> | Partial<T>[], query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[]>;
    update(id: string, data: T, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    patch(id: string, data: Partial<T>, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
    remove(id: string, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
    get model(): ModelType<T, U>;
    _find(query: Query, user?: any, req?: Request, res?: Response): Promise<FindResponse<T>>;
    _get(id: string | null, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    _create(data: Partial<T> | Partial<T>[], query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[]>;
    _update(id: string, data: T, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | null>;
    _patch(id: string, data: Partial<T>, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
    _remove(id: string, query?: Query, user?: User, req?: Request, res?: Response): Promise<T | T[] | null>;
}
export {};
