/// <reference types="node" />
import { Server } from 'http';
import EventEmitter from 'events';
import { Application } from 'express';
import { RedisOptions } from 'ioredis';
import { MicroServiceNames, ServiceTypes, SubMicroServiceNames } from '.';
import { MicroService } from './services';
import { LoggerOptions } from 'express-winston';
export declare const EVENTS: {
    SERVER_STARTED: string;
    SERVICES_REGISTERED: string;
};
export declare class Services {
    private static services;
    static get<T extends keyof ServiceTypes>(service: T): ServiceTypes[T];
    static set(services: any): void;
}
export interface IMicroServices {
    [microService: string]: {
        [service: string]: MicroService;
    };
}
export declare class MicroServices {
    private static services;
    static get<U extends keyof MicroServiceNames, T extends keyof SubMicroServiceNames>(microServiceName: U, service: T): MicroService;
    static set(services: IMicroServices): void;
}
export declare const XitkovEvents: EventEmitter;
export declare type Dialect = 'mongodb' | 'postgres';
export interface IExpressOptions {
    limit?: string;
}
export interface IAuth {
    required: boolean;
    baseURL: string;
}
export interface ISocket {
    enable: boolean;
    socketCorsOrigin: string;
    redis?: {
        url?: string;
        redisOptions?: RedisOptions;
    };
}
export interface Config {
    app: Application;
    database?: {
        dialect?: Dialect;
        instance?: any;
    };
    auth?: IAuth;
    socket?: ISocket;
    logger?: {
        express?: Partial<LoggerOptions>;
    };
    express?: IExpressOptions;
}
export declare class Xitkov {
    readonly app: Application;
    readonly server: Server;
    constructor({ app, database, express, auth, logger, socket }: Config);
    private init;
    private initSocket;
}
