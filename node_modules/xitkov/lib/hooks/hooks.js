"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addQuerySupport = exports.loggedIn = exports.externalDisallow = exports.disallow = void 0;
const sequelize_1 = require("sequelize");
const errors_1 = require("../errors");
const logger_1 = require("../logger");
const disallow = () => {
    return new errors_1.NotFound('Not Found');
};
exports.disallow = disallow;
const externalDisallow = (...params) => {
    var _a;
    const req = params[params.length - 2];
    const internalToken = req.headers['internaltoken'];
    if (internalToken === ((_a = process.env.INTERNAL_TOKEN) !== null && _a !== void 0 ? _a : 'internal_token')) {
        logger_1.Logger.info('externalDisallow', {
            internalToken
        });
        return;
    }
    return new errors_1.NotFound('Not Found');
};
exports.externalDisallow = externalDisallow;
const loggedIn = (...params) => {
    const req = params[params.length - 2];
    const user = req === null || req === void 0 ? void 0 : req.user;
    if (!user) {
        return new errors_1.Unauthorized("Logged in required");
    }
    return user;
};
exports.loggedIn = loggedIn;
const addQuerySupport = (...params) => {
    const hookName = params[params.length - 1];
    let queryIndex = 0;
    if (/create|patch|update|remove|get/gi.test(hookName)) {
        queryIndex = 1;
    }
    const query = params[queryIndex];
    const queryObj = {};
    Object.keys(query).filter(key => {
        const value = query[key];
        if (typeof value === 'object') {
            let [conditionValue] = Object.values(value);
            const [condition] = Object.keys(value);
            const sequelizeOp = sequelize_1.Op[condition.replace('$', '')];
            try {
                conditionValue = JSON.parse(conditionValue);
            }
            catch (err) {
                //
            }
            if (sequelizeOp) {
                queryObj[key] = {
                    [sequelizeOp]: conditionValue,
                };
            }
        }
        else {
            queryObj[key] = value;
        }
    });
    params[queryIndex] = queryObj;
    return queryObj;
};
exports.addQuerySupport = addQuerySupport;
//# sourceMappingURL=hooks.js.map