"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Xitkov = exports.XitkovEvents = exports.MicroServices = exports.Services = exports.EVENTS = void 0;
const http_1 = require("http");
const events_1 = __importDefault(require("events"));
const express_1 = __importDefault(require("express"));
const socket_io_1 = require("socket.io");
const redis_adapter_1 = require("@socket.io/redis-adapter");
const ioredis_1 = __importDefault(require("ioredis"));
const _1 = require(".");
const services_1 = require("./services");
const register_services_1 = require("./services/register-services");
const libs_1 = require("./libs");
exports.EVENTS = {
    SERVER_STARTED: 'SERVER_STARTED',
    SERVICES_REGISTERED: 'SERVICES_REGISTERED',
};
class Services {
    static get(service) {
        return this.services[service];
    }
    static set(services) {
        Services.services = services;
    }
}
exports.Services = Services;
class MicroServices {
    static get(microServiceName, service) {
        return this.services[microServiceName][service];
    }
    static set(services) {
        MicroServices.services = services;
    }
}
exports.MicroServices = MicroServices;
exports.XitkovEvents = new events_1.default();
class Xitkov {
    constructor({ app, database, express, auth, logger, socket }) {
        var _a;
        this.app = app;
        this.server = new http_1.Server(app);
        this.init((_a = express === null || express === void 0 ? void 0 : express.limit) !== null && _a !== void 0 ? _a : '50mb', logger === null || logger === void 0 ? void 0 : logger.express);
        this.initSocket(socket === null || socket === void 0 ? void 0 : socket.enable, socket === null || socket === void 0 ? void 0 : socket.redis, socket === null || socket === void 0 ? void 0 : socket.socketCorsOrigin);
        services_1.registerMicroServices().then(services => {
            MicroServices.set(services);
        });
        register_services_1.registerServices(this.app, auth, database).then((services) => {
            var _a;
            exports.XitkovEvents.emit(exports.EVENTS.SERVER_STARTED, true);
            Services.set(services);
            const port = (_a = process.env.PORT) !== null && _a !== void 0 ? _a : 3000;
            this.server.listen(port, () => {
                exports.XitkovEvents.emit(exports.EVENTS.SERVER_STARTED, port);
                _1.Logger.info(`Server Started ${port}`);
            });
        });
    }
    init(limit = "50mb", loggerOptions) {
        this.app.use(libs_1.InternalLogs.middleware(loggerOptions));
        this.app.use(express_1.default.json({ limit }));
    }
    initSocket(enable, redis, socketCorsOrigin) {
        var _a;
        if (enable) {
            _1.Socket.io = new socket_io_1.Server(this.server, {
                cors: {
                    origin: socketCorsOrigin
                }
            });
            if (redis) {
                let pubClient;
                if (redis === null || redis === void 0 ? void 0 : redis.url) {
                    pubClient = new ioredis_1.default(redis === null || redis === void 0 ? void 0 : redis.url);
                }
                else {
                    pubClient = new ioredis_1.default((_a = redis.redisOptions) !== null && _a !== void 0 ? _a : {});
                }
                if (pubClient) {
                    const subClient = pubClient.duplicate();
                    _1.Socket.io.adapter(redis_adapter_1.createAdapter(pubClient, subClient));
                    _1.Logger.info("Redis added to socket");
                }
            }
        }
    }
}
exports.Xitkov = Xitkov;
//# sourceMappingURL=app.js.map