import BullQueue from 'bull';
export declare class Queue<T = any> {
    readonly queue: BullQueue.Queue<T>;
    private readonly queueName;
    constructor(name: string, redisUrl: string, opts?: BullQueue.QueueOptions);
    add(data: T, opts?: BullQueue.JobOptions): Promise<BullQueue.Job<T>>;
    get consume(): {
        (callback: BullQueue.ProcessCallbackFunction<T>): Promise<void>;
        (callback: BullQueue.ProcessPromiseFunction<T>): Promise<void>;
        (callback: string): Promise<void>;
        (concurrency: number, callback: BullQueue.ProcessCallbackFunction<T>): Promise<void>;
        (concurrency: number, callback: BullQueue.ProcessPromiseFunction<T>): Promise<void>;
        (concurrency: number, callback: string): Promise<void>;
        (name: string, callback: BullQueue.ProcessCallbackFunction<T>): Promise<void>;
        (name: string, callback: BullQueue.ProcessPromiseFunction<T>): Promise<void>;
        (name: string, callback: string): Promise<void>;
        (name: string, concurrency: number, callback: BullQueue.ProcessCallbackFunction<T>): Promise<void>;
        (name: string, concurrency: number, callback: BullQueue.ProcessPromiseFunction<T>): Promise<void>;
        (name: string, concurrency: number, callback: string): Promise<void>;
    };
}
