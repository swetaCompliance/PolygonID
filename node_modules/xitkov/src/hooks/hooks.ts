import { Op } from "sequelize";
import { NotFound, Unauthorized } from "../errors";
import { Logger } from "../logger";

export const disallow = () => {
  return new NotFound('Not Found')
}

export const externalDisallow = (...params: any[]) => {
  const req = params[params.length - 2]
  const internalToken = req.headers['internaltoken']
  if (internalToken === (process.env.INTERNAL_TOKEN ?? 'internal_token')) {
    Logger.info('externalDisallow', {
      internalToken
    })
    return
  }
  return new NotFound('Not Found')
}

export const loggedIn = (...params: any[]) => {
  const req = params[params.length - 2]
  const user = req?.user
  if (!user) {
    return new Unauthorized("Logged in required")
  }
  return user;
}

export const addQuerySupport = (...params: any[]) => {
  const hookName = params[params.length - 1];
  let queryIndex = 0;

  if (/create|patch|update|remove|get/gi.test(hookName)) {
    queryIndex = 1;
  }

  const query = params[queryIndex];
  const queryObj: any = {};
  Object.keys(query).filter(key => {
    const value = query[key];
    if (typeof value === 'object') {
      let [conditionValue] = Object.values(value);
      const [condition] = Object.keys(value);
      const sequelizeOp = (Op as any)[condition.replace('$', '')];
      try {
        conditionValue = JSON.parse(conditionValue as any);
      } catch (err) {
        //
      }
      if (sequelizeOp) {
        queryObj[key] = {
          [sequelizeOp]: conditionValue,
        };
      }
    } else {
      queryObj[key] = value;
    }
  });
  params[queryIndex] = queryObj;
  return queryObj;
}