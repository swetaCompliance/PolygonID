import { Server } from 'http'
import EventEmitter from 'events';
import express, {Application} from 'express';
import {Server as SocketServer} from 'socket.io'
import { createAdapter } from '@socket.io/redis-adapter';
import Redis, { RedisOptions } from 'ioredis';
import {Logger, MicroServiceNames, ServiceTypes, Socket, SubMicroServiceNames} from '.';
import { MicroService, registerMicroServices } from './services';
import {registerServices} from './services/register-services';
import { InternalLogs } from './libs';
import { LoggerOptions } from 'express-winston';

export const EVENTS = {
  SERVER_STARTED: 'SERVER_STARTED',
  SERVICES_REGISTERED: 'SERVICES_REGISTERED',
}
export class Services {
  private static services: ServiceTypes
  static get<T extends keyof ServiceTypes>(service: T): ServiceTypes[T] {
    return this.services[service];
  }
  static set(services: any){
    Services.services = services
  }
}

export interface IMicroServices {
  [microService: string]: {
      [service: string]: MicroService
  }
}

export class MicroServices {
  private static services: IMicroServices
  static get<U extends keyof MicroServiceNames, T extends keyof SubMicroServiceNames>(microServiceName: U, service: T): MicroService {
    return this.services[microServiceName][service];
  }
  static set(services: IMicroServices){
    MicroServices.services = services
  }
}

export const XitkovEvents = new EventEmitter()

export type Dialect = 'mongodb' | 'postgres'

export interface IExpressOptions {
  limit?: string
}

export interface IAuth {
  required: boolean,
  baseURL: string
}

export interface ISocket {
  enable: boolean
  socketCorsOrigin: string
  redis?: {
    url?: string;
    redisOptions?: RedisOptions
  }
}
export interface Config {
  app: Application
  database?: {
    dialect?: Dialect,
    instance?: any
  }
  auth?: IAuth
  socket?: ISocket
  logger?: {
    express?: Partial<LoggerOptions>
  }
  express?: IExpressOptions
}

export class Xitkov {
  readonly app: Application;
  readonly server: Server
  constructor({
    app,
    database,
    express,
    auth,
    logger,
    socket
  }: Config) {
    this.app = app
    this.server = new Server(app)
    this.init(express?.limit ?? '50mb', logger?.express)
    this.initSocket(socket?.enable, socket?.redis, socket?.socketCorsOrigin)
    registerMicroServices().then(services => {
      MicroServices.set(services)
    })
    registerServices(this.app, auth, database).then((services) => {
      XitkovEvents.emit(EVENTS.SERVER_STARTED, true)
      Services.set(services)
      const port = process.env.PORT ?? 3000
      this.server.listen(port, () => {
        XitkovEvents.emit(EVENTS.SERVER_STARTED, port)
        Logger.info(`Server Started ${port}`);
      });
    });
  }

  private init(limit: string = "50mb", loggerOptions?: Partial<LoggerOptions>) {
    this.app.use(InternalLogs.middleware(loggerOptions))
    this.app.use(express.json({ limit }))
  }

  private initSocket(enable?: boolean, redis?: ISocket['redis'],  socketCorsOrigin?: string) {
    if (enable) {
      Socket.io = new SocketServer(this.server, {
        cors: {
          origin: socketCorsOrigin
        }
      })
      if (redis) {
        let pubClient: Redis;
        if (redis?.url) {
          pubClient = new Redis(redis?.url);
        } else {
          pubClient = new Redis(redis.redisOptions ?? {});
        }
        if (pubClient) {
          const subClient = pubClient.duplicate();
          Socket.io.adapter(createAdapter(pubClient, subClient));
          Logger.info("Redis added to socket")
        }
      }
    }
  }
}
