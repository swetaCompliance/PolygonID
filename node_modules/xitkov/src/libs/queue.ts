import BullQueue from 'bull';
import { Logger } from '../logger';

export class Queue<T = any> {
  readonly queue: BullQueue.Queue<T>;
  private readonly queueName: string;
  
  constructor(name: string, redisUrl: string, opts: BullQueue.QueueOptions = {}) {
    const defaultOpts: BullQueue.QueueOptions = {
      limiter: {
        duration: 50000,
        max: 30,
      },
      ...opts
    }
    const env = process.env.ENVIRONMENT ?? 'dev';
    let queueName = `${name}_${env}`
    if (/prod/gi.test(env) && !/pre/gi.test(env)) {
      queueName = name
    }
    this.queue = new BullQueue(queueName, redisUrl, defaultOpts);
    this.queueName = queueName

    this.queue.on('completed', function (job, result) {
      const payload = { job, result }
      Logger.info(`Completed ${queueName}: `, payload)
    });
    
    this.queue.on('failed', async function (job, error) {
      const payload = { job, error }
      Logger.info(`Failed ${queueName}: `, payload)
    });
  }

  async add(data: T, opts?: BullQueue.JobOptions) {
    const options: BullQueue.JobOptions = {
      removeOnComplete: true, // removes job from queue on success
      removeOnFail: true, // removes job from queue on failure,
      attempts: 1,
      ...(opts ?? {})
    }
    return this.queue.add(data, options);
  }

  get consume() {
    return this.queue.process;
  }
}