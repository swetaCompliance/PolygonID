import axios, { AxiosInstance, AxiosRequestConfig } from 'axios';
import { BadRequest, InternalServer, NoContent, Unauthorized } from '../errors';

export type AuthServiceQuery = {[key: string]: any};

export interface InternalAuthServiceMethods {
  readonly request: AxiosInstance;
  readonly baseURL: string;
}

export interface InternalAuthServiceOptions {
    axiosConfig?: AxiosRequestConfig;
    baseURL: string;
}

export class AuthService implements InternalAuthServiceMethods {
    readonly request: AxiosInstance
    readonly baseURL: string

    constructor({ axiosConfig, baseURL }: InternalAuthServiceOptions) {
        this.request = axios.create({ ...(axiosConfig ?? {}), baseURL,})
        this.baseURL = baseURL;
    }

    throwError(err: any): any {
        const message = err?.response?.data?.message
        const status = err?.response?.status
        if (message) {
            switch(status) {
                case 401: {
                    return new Unauthorized(message)
                }
                case 400: {
                    return new BadRequest(message)
                }
                case 500: {
                    return new InternalServer(message)
                }
                case 204: {
                    return new NoContent(message)
                }
                default: {
                    return new InternalServer(message)
                }
            }
        } else {
            return new InternalServer(err?.message ?? err)
        }
    }

    async verify<T = any>(query?: AuthServiceQuery, config: AxiosRequestConfig = {}): Promise<T> {
        try {
            const {data} = await this.request.post(`${this.baseURL}/verify`, {...config, params: query })
            return data?.data ?? data
        } catch(err: any) {
            return this.throwError(err)
        }
    }
}