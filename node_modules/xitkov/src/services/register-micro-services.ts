import {promises} from 'fs';
import path from 'path';
import { Logger } from '../logger';
import { MicroService } from './micro-service';

export async function registerMicroServices() {
  if (require.main?.filename == undefined) {
    throw new Error("Please provide service path")
  }
  const appDir = path.dirname(require.main?.filename as string);
  const serviceDirPath = appDir + '/micro-services';

  const servicesNames = (await promises.readdir(serviceDirPath)).filter(
    file => !/index.|.js.map|.d.ts|types./.test(file)
  );

  const services: any = {}

  for (const serviceName of servicesNames) {
    const servicePath = `${serviceDirPath}/${serviceName}`;
    try {
      const service = new (require(servicePath).default)
      if (service) {
        const { baseURL, name, services: subServicesNames, config } = service
        services[name] = services[name] ?? {}
        subServicesNames?.forEach((service: string) => {
          services[name][service] = new MicroService({ axiosConfig: config, name, service, baseURL })
        })
        services[serviceName] = service
      }
    } catch(error) {
      Logger.warn("No micro services", {
        error
      })
    }
  }
  return services;
}
